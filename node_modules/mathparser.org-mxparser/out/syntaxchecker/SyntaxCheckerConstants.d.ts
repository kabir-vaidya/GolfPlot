/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 * @class
 */
export interface SyntaxCheckerConstants {
}
export declare namespace SyntaxCheckerConstants {
    /**
     * End of File.
     */
    const EOF: number;
    /**
     * RegularExpression Id.
     */
    const WHITESPACE: number;
    /**
     * RegularExpression Id.
     */
    const LETTER: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B1: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B2: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B3: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B4: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B5: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B6: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B7: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B8: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B9: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B10: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B11: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B12: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B13: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B14: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B15: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B16: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B17: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B18: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B19: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B20: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B21: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B22: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B23: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B24: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B25: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B26: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B27: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B28: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B29: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B30: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B31: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B32: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B33: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B34: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B35: number;
    /**
     * RegularExpression Id.
     */
    const DIGIT_B36: number;
    /**
     * RegularExpression Id.
     */
    const LETTERS: number;
    /**
     * RegularExpression Id.
     */
    const INTEGER: number;
    /**
     * RegularExpression Id.
     */
    const LEFT_PAR: number;
    /**
     * RegularExpression Id.
     */
    const RIGHT_PAR: number;
    /**
     * RegularExpression Id.
     */
    const PLUS: number;
    /**
     * RegularExpression Id.
     */
    const MINUS: number;
    /**
     * RegularExpression Id.
     */
    const MULTIPLY: number;
    /**
     * RegularExpression Id.
     */
    const DIV: number;
    /**
     * RegularExpression Id.
     */
    const POWER: number;
    /**
     * RegularExpression Id.
     */
    const TETRATION: number;
    /**
     * RegularExpression Id.
     */
    const MODULO: number;
    /**
     * RegularExpression Id.
     */
    const FACTORIAL: number;
    /**
     * RegularExpression Id.
     */
    const PERCENTAGE: number;
    /**
     * RegularExpression Id.
     */
    const COMMA: number;
    /**
     * RegularExpression Id.
     */
    const SEMICOLON: number;
    /**
     * RegularExpression Id.
     */
    const EQ: number;
    /**
     * RegularExpression Id.
     */
    const UNIT: number;
    /**
     * RegularExpression Id.
     */
    const NEQ: number;
    /**
     * RegularExpression Id.
     */
    const LT: number;
    /**
     * RegularExpression Id.
     */
    const LEQ: number;
    /**
     * RegularExpression Id.
     */
    const GT: number;
    /**
     * RegularExpression Id.
     */
    const GEQ: number;
    /**
     * RegularExpression Id.
     */
    const OR: number;
    /**
     * RegularExpression Id.
     */
    const AND: number;
    /**
     * RegularExpression Id.
     */
    const NOT: number;
    /**
     * RegularExpression Id.
     */
    const BITNOT: number;
    /**
     * RegularExpression Id.
     */
    const IMP: number;
    /**
     * RegularExpression Id.
     */
    const CIMP: number;
    /**
     * RegularExpression Id.
     */
    const NIMP: number;
    /**
     * RegularExpression Id.
     */
    const CNIMP: number;
    /**
     * RegularExpression Id.
     */
    const NAND: number;
    /**
     * RegularExpression Id.
     */
    const EQV: number;
    /**
     * RegularExpression Id.
     */
    const NOR: number;
    /**
     * RegularExpression Id.
     */
    const BITWISE: number;
    /**
     * RegularExpression Id.
     */
    const XOR: number;
    /**
     * RegularExpression Id.
     */
    const CHAR: number;
    /**
     * RegularExpression Id.
     */
    const DEC_FRACT: number;
    /**
     * RegularExpression Id.
     */
    const DEC_FRACT_OR_INT: number;
    /**
     * RegularExpression Id.
     */
    const DECIMAL: number;
    /**
     * RegularExpression Id.
     */
    const BASE1: number;
    /**
     * RegularExpression Id.
     */
    const BASE2: number;
    /**
     * RegularExpression Id.
     */
    const BASE3: number;
    /**
     * RegularExpression Id.
     */
    const BASE4: number;
    /**
     * RegularExpression Id.
     */
    const BASE5: number;
    /**
     * RegularExpression Id.
     */
    const BASE6: number;
    /**
     * RegularExpression Id.
     */
    const BASE7: number;
    /**
     * RegularExpression Id.
     */
    const BASE8: number;
    /**
     * RegularExpression Id.
     */
    const BASE9: number;
    /**
     * RegularExpression Id.
     */
    const BASE10: number;
    /**
     * RegularExpression Id.
     */
    const BASE11: number;
    /**
     * RegularExpression Id.
     */
    const BASE12: number;
    /**
     * RegularExpression Id.
     */
    const BASE13: number;
    /**
     * RegularExpression Id.
     */
    const BASE14: number;
    /**
     * RegularExpression Id.
     */
    const BASE15: number;
    /**
     * RegularExpression Id.
     */
    const BASE16: number;
    /**
     * RegularExpression Id.
     */
    const BASE17: number;
    /**
     * RegularExpression Id.
     */
    const BASE18: number;
    /**
     * RegularExpression Id.
     */
    const BASE19: number;
    /**
     * RegularExpression Id.
     */
    const BASE20: number;
    /**
     * RegularExpression Id.
     */
    const BASE21: number;
    /**
     * RegularExpression Id.
     */
    const BASE22: number;
    /**
     * RegularExpression Id.
     */
    const BASE23: number;
    /**
     * RegularExpression Id.
     */
    const BASE24: number;
    /**
     * RegularExpression Id.
     */
    const BASE25: number;
    /**
     * RegularExpression Id.
     */
    const BASE26: number;
    /**
     * RegularExpression Id.
     */
    const BASE27: number;
    /**
     * RegularExpression Id.
     */
    const BASE28: number;
    /**
     * RegularExpression Id.
     */
    const BASE29: number;
    /**
     * RegularExpression Id.
     */
    const BASE30: number;
    /**
     * RegularExpression Id.
     */
    const BASE31: number;
    /**
     * RegularExpression Id.
     */
    const BASE32: number;
    /**
     * RegularExpression Id.
     */
    const BASE33: number;
    /**
     * RegularExpression Id.
     */
    const BASE34: number;
    /**
     * RegularExpression Id.
     */
    const BASE35: number;
    /**
     * RegularExpression Id.
     */
    const BASE36: number;
    /**
     * RegularExpression Id.
     */
    const BINARY: number;
    /**
     * RegularExpression Id.
     */
    const OCTAL: number;
    /**
     * RegularExpression Id.
     */
    const HEXADECIMAL: number;
    /**
     * RegularExpression Id.
     */
    const FRACTION: number;
    /**
     * RegularExpression Id.
     */
    const IDENTIFIER: number;
    /**
     * RegularExpression Id.
     */
    const FUNCTION: number;
    /**
     * RegularExpression Id.
     */
    const INVALID_TOKEN: number;
    /**
     * RegularExpression Id.
     */
    const UNEXPECTED_CHAR: number;
    /**
     * Lexical state.
     */
    const DEFAULT: number;
    /**
     * Literal token values.
     */
    const tokenImage: string[];
}
